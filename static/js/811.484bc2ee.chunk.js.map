{"version":3,"file":"static/js/811.484bc2ee.chunk.js","mappings":"kKAsBA,MAAMA,EAAW,+BACXC,EAAU,mCAEHC,EAAmBC,eACjBC,EAAAA,EACVC,IAAI,GAADC,OAAIN,EAAQ,gCAAAM,OAA+BL,IAC9CM,MAAKC,GAAYA,EAASC,OAGlBC,EAAoBP,eAClBC,EAAAA,EACVC,IAAI,GAADC,OAAIN,EAAQ,0BAAAM,OAAyBL,EAAO,WAAAK,OAAUK,IACzDJ,MAAKC,GAAYA,EAASC,OAGlBG,EAAoBT,eAClBC,EAAAA,EACVC,IAAI,GAADC,OAAIN,EAAQ,WAAAM,OAAUO,EAAE,aAAAP,OAAYL,EAAO,oBAC9CM,MAAKC,GAAYA,EAASC,OAGlBK,EAAkBX,UAC7B,IAIE,aAHuBC,EAAAA,EAAMC,IAAI,GAADC,OAC3BN,EAAQ,WAAAM,OAAUO,EAAE,qBAAAP,OAAoBL,KAE7BQ,IAClB,CAAE,MAAOM,GACP,MAAM,IAAIC,MAAM,0BAClB,GAGWC,EAAqBd,UAGhC,IAIE,aAHuBC,EAAAA,EAAMC,IAAI,GAADC,OAC3BN,EAAQ,WAAAM,OAAUO,EAAE,qBAAAP,OAAoBL,KAE7BQ,IAClB,CAAE,MAAOM,GACP,MAAM,IAAIC,MAAM,0BAClB,E,mFC7DK,MAAME,EAASC,EAAAA,EAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2GAOlBC,EAASJ,EAAAA,EAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sFAOlBI,EAASP,EAAAA,EAAOQ,GAAEC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2BAGlBO,GAAWV,EAAAA,EAAAA,GAAOW,EAAAA,GAAPX,CAAeY,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,iOAY1BU,EAAab,EAAAA,EAAOc,GAAEC,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,uHAStBa,EAAchB,EAAAA,EAAOiB,IAAGC,IAAAA,GAAAf,EAAAA,EAAAA,GAAA,6IAQxBgB,EAAQnB,EAAAA,EAAOoB,EAACC,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,+HAUhBmB,EAAoBtB,EAAAA,EAAOuB,KAAIC,IAAAA,GAAArB,EAAAA,EAAAA,GAAA,8B,uBCvC5C,MAAMsB,EAAa,mCAEJ,SAASC,EAAYC,GAIhC,IAJiC,OACnCC,GAGDD,EACC,MAAME,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACnC,EAAM,CAAAkC,SAAC,mBACRC,EAAAA,EAAAA,KAAC9B,EAAM,CAAA6B,SACJL,EAAOO,KAAIC,IAAoD,IAAnD,GAAE1C,EAAE,MAAE2C,EAAK,OAAEC,EAAM,YAAEC,EAAW,UAAEC,GAAWJ,EACxD,OACEF,EAAAA,EAAAA,KAAC3B,EAAM,CAAA0B,UACLF,EAAAA,EAAAA,MAACrB,EAAQ,CAAC+B,GAAE,WAAAtD,OAAaO,GAAMgD,MAAO,CAAEC,KAAMd,GAAWI,SAAA,EACvDC,EAAAA,EAAAA,KAACrB,EAAU,CAAAoB,SACRI,GAAgB,2BAEnBH,EAAAA,EAAAA,KAAA,OAAKU,IAAG,GAAAzD,OAAKsC,GAAUtC,OAAGmD,GAAUO,IAAKR,KACzCN,EAAAA,EAAAA,MAACf,EAAW,CAAAiB,SAAA,EACVF,EAAAA,EAAAA,MAACZ,EAAK,CAAAc,SAAA,CAAC,gBACS,KACdC,EAAAA,EAAAA,KAACZ,EAAiB,CAAAW,SAAEM,QAEtBR,EAAAA,EAAAA,MAACZ,EAAK,CAAAc,SAAA,CAAC,eAELF,EAAAA,EAAAA,MAACT,EAAiB,CAAAW,SAAA,CAAC,IAAEO,eAbhB9C,EAiBJ,QAMrB,C,6GCrDA,MAAM,OAAEoD,GAAWC,EAAAA,QAEJ,SAASC,IACtB,MAAMnB,GAAWC,EAAAA,EAAAA,MACXmB,GAAWC,EAAAA,EAAAA,MAgBjB,OACEhB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAAAlB,UACHC,EAAAA,EAAAA,KAACY,EAAM,CACLM,YAAY,oBACZC,YAAU,EACVC,YAAY,SACZC,KAAK,SACLC,SAtBUC,IAChBR,EAAS,IACJpB,EACH6B,OAAO,SAADvE,OAAWsE,KAEL,KAAVA,EACFE,YAAW,KACTC,EAAAA,OAAOC,QAAQ,sBAAsB,GACpC,KAEHD,EAAAA,OAAOE,QAAQ,kBACjB,EAYMC,MAAO,CACLC,MAAO,YAMnB,C,wBCxBe,SAASC,IAAY,IAADC,EACjC,MAAM,OAAER,IAAW5B,EAAAA,EAAAA,MACbqC,EAAgD,QAA3CD,EAAG,IAAIE,gBAAgBV,GAAQxE,IAAI,gBAAQ,IAAAgF,EAAAA,EAAI,IAEnDtC,EAAQyC,IAAaC,EAAAA,EAAAA,UAAsC,MAoBlE,OAlBAC,EAAAA,EAAAA,YAAU,KACM,KAAVJ,IACF5E,EAAAA,EAAAA,IAAkB4E,GAAO/E,MAAKuC,IAAyC,IAAxC,QAAE6C,GAAgC7C,EAC/D,MAAM8C,EAAkCD,EAAQrC,KAC9CC,IAAA,IAAC,GAAE1C,EAAE,eAAEgF,EAAc,YAAEC,EAAW,aAAEC,EAAY,WAAEC,GAAYzC,EAAA,MAAM,CAClE1C,KACA2C,MAAOqC,EACPpC,OAAQqC,EACRpC,YAAaqC,EACbpC,UAAWqC,EACZ,IAGHR,EAAUI,EAAU,GAExB,GACC,CAACN,KAGFpC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC4C,EAAS,IACTlD,IACCM,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAACnD,OAAQA,QAK9B,C","sources":["api/fetchApi.ts","components/TrendingList/TrendingList.styled.tsx","components/TrendingList/TrendingList.tsx","components/SearchForm/SearchForm.tsx","pages/Projects.tsx"],"sourcesContent":["import axios from 'axios';\n\ninterface ActorCast {\n  id: number;\n  name: string;\n  profile_path: string;\n}\n\ninterface FetchMoviesCast {\n  cast: ActorCast[];\n}\n\ninterface ActorReview {\n  id: string;\n  author: string;\n  content: string;\n}\n\ninterface FetchMoviesReviews {\n  results: ActorReview[];\n}\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3ed700b5d7b679b57b749969c057aea5';\n\nexport const fetchTrendMovies = async () => {\n  return await axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => response.data);\n};\n\nexport const fetchMoviesByName = async (name: string) => {\n  return await axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${name}`)\n    .then(response => response.data);\n};\n\nexport const fetchMoviesDetail = async (id: string) => {\n  return await axios\n    .get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`)\n    .then(response => response.data);\n};\n\nexport const fetchMoviesCast = async (id: string): Promise<FetchMoviesCast> => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`,\n    );\n    return response.data as FetchMoviesCast;\n  } catch (error) {\n    throw new Error('Failed to retrieve data');\n  }\n};\n\nexport const fetchMoviesReviews = async (\n  id: string,\n): Promise<FetchMoviesReviews> => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`,\n    );\n    return response.data as FetchMoviesReviews;\n  } catch (error) {\n    throw new Error('Failed to retrieve data');\n  }\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const ListH1 = styled.h1`\n  margin-bottom: 15px;\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 44px;\n`;\n\nexport const ListUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  margin-bottom: 80px;\n`;\n\nexport const ListLi = styled.li`\n  width: 370px;\n`;\nexport const ListLink = styled(NavLink)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 7px rgba(0, 0, 0, 0.12), 5px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\n\nexport const ListTitleP = styled.h2`\n  font-size: 20px;\n  font-weight: 500;\n  text-align: center;\n\n  margin-bottom: 10px;\n  color: #000000;\n`;\n\nexport const ListWrapDiv = styled.div`\n  padding: 5px;\n  border-left: 1px solid;\n  border-bottom: 1px solid;\n  border-right: 1px solid;\n  color: rgba(0, 0, 0, 0.2);\n`;\n\nexport const ListP = styled.p`\n  :not(:last-child) {\n    margin-bottom: 5px;\n  }\n  font-size: 20px;\n  text-align: center;\n\n  color: #000000;\n`;\n\nexport const ListParagraphSpan = styled.span`\n  font-size: 18px;\n`;\n\n// export const ListImg = styled.img`\n//   margin-bottom: 5px;\n// `;\n","import {\n  ListH1,\n  ListUl,\n  ListLi,\n  ListLink,\n  ListTitleP,\n  ListWrapDiv,\n  ListP,\n  ListParagraphSpan,\n} from './TrendingList.styled';\nimport { useLocation } from 'react-router-dom';\n\nexport interface ITrendingListProps {\n  id: number;\n  title: string;\n  poster: string;\n  voteAverage: number;\n  voteCount: number;\n}\n\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n\nexport default function TrendingList({\n  movies,\n}: {\n  movies: ITrendingListProps[];\n}) {\n  const location = useLocation();\n  return (\n    <>\n      <ListH1>Trending list</ListH1>\n      <ListUl>\n        {movies.map(({ id, title, poster, voteAverage, voteCount }) => {\n          return (\n            <ListLi key={id}>\n              <ListLink to={`/movies/${id}`} state={{ from: location }}>\n                <ListTitleP>\n                  {title ? title : 'Movie without a title'}\n                </ListTitleP>\n                <img src={`${imgBaseUrl}${poster}`} alt={title} />\n                <ListWrapDiv>\n                  <ListP>\n                    Vote average:{' '}\n                    <ListParagraphSpan>{voteAverage}</ListParagraphSpan>\n                  </ListP>\n                  <ListP>\n                    Vote count:\n                    <ListParagraphSpan> {voteCount}</ListParagraphSpan>\n                  </ListP>\n                </ListWrapDiv>\n              </ListLink>\n            </ListLi>\n          );\n        })}\n      </ListUl>\n    </>\n  );\n}\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport { Input, Form } from 'antd';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst { Search } = Input;\n\nexport default function SearchForm() {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const onSearch = (value: string) => {\n    navigate({\n      ...location,\n      search: `query=${value}`,\n    });\n    if (value !== '') {\n      setTimeout(() => {\n        Notify.success('Request successfull');\n      }, 300);\n    } else {\n      Notify.warning('Enter something');\n    }\n  };\n\n  return (\n    <div>\n      <Form>\n        <Search\n          placeholder=\"input search text\"\n          allowClear\n          enterButton=\"Search\"\n          size=\"middle\"\n          onSearch={onSearch}\n          style={{\n            width: '30%',\n          }}\n        />\n      </Form>\n    </div>\n  );\n}\n","import { fetchMoviesByName } from '../api/fetchApi';\nimport SearchBar from '../components/SearchForm/SearchForm';\nimport MoviesCard from '../components/TrendingList/TrendingList';\nimport { ITrendingListProps } from '../components/TrendingList/TrendingList';\n\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\ninterface Movies {\n  id: number;\n  original_title: string;\n  poster_path: string;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport default function Projects() {\n  const { search } = useLocation();\n  const query = new URLSearchParams(search).get('query') ?? '';\n\n  const [movies, setMovies] = useState<ITrendingListProps[] | null>(null);\n\n  useEffect(() => {\n    if (query !== '') {\n      fetchMoviesByName(query).then(({ results }: { results: Movies[] }) => {\n        const moviesArr: ITrendingListProps[] = results.map(\n          ({ id, original_title, poster_path, vote_average, vote_count }) => ({\n            id,\n            title: original_title,\n            poster: poster_path,\n            voteAverage: vote_average,\n            voteCount: vote_count,\n          }),\n        );\n\n        setMovies(moviesArr);\n      });\n    }\n  }, [query]);\n\n  return (\n    <>\n      <SearchBar />\n      {movies && (\n        <div>\n          <MoviesCard movies={movies} />\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","fetchTrendMovies","async","axios","get","concat","then","response","data","fetchMoviesByName","name","fetchMoviesDetail","id","fetchMoviesCast","error","Error","fetchMoviesReviews","ListH1","styled","h1","_templateObject","_taggedTemplateLiteral","ListUl","ul","_templateObject2","ListLi","li","_templateObject3","ListLink","NavLink","_templateObject4","ListTitleP","h2","_templateObject5","ListWrapDiv","div","_templateObject6","ListP","p","_templateObject7","ListParagraphSpan","span","_templateObject8","imgBaseUrl","TrendingList","_ref","movies","location","useLocation","_jsxs","_Fragment","children","_jsx","map","_ref2","title","poster","voteAverage","voteCount","to","state","from","src","alt","Search","Input","SearchForm","navigate","useNavigate","Form","placeholder","allowClear","enterButton","size","onSearch","value","search","setTimeout","Notify","success","warning","style","width","Projects","_URLSearchParams$get","query","URLSearchParams","setMovies","useState","useEffect","results","moviesArr","original_title","poster_path","vote_average","vote_count","SearchBar","MoviesCard"],"sourceRoot":""}