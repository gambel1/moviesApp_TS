{"version":3,"file":"static/js/456.cfb31c16.chunk.js","mappings":"mKAEO,MAAMA,EAAcC,EAAAA,EAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sFAOvBC,EAAcJ,EAAAA,EAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2BAIvBI,EAAkBP,EAAAA,EAAOQ,EAACC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,qD,iCCRvC,MAAMO,EAAa,mCAQJ,SAASC,IACtB,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACbC,EAAQC,IAAaC,EAAAA,EAAAA,UAAyB,MAqBrD,OAnBAC,EAAAA,EAAAA,YAAU,KACJL,IAEFM,EAAAA,EAAAA,IAAgBN,GAASO,MAAKC,IAC5B,GAAIC,MAAMC,QAAQF,EAAKG,MAAO,CAC5B,MAAMC,EAAqBJ,EAAKG,KAAKE,KACnCC,IAAA,IAAC,GAAEC,EAAE,KAAEC,EAAI,aAAEC,GAAcH,EAAA,MAAM,CAC/BC,KACAC,OACAE,MAAOD,EACR,IAGHd,EAAUS,EACZ,IAEJ,GACC,CAACZ,IAGFE,IACEiB,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAChC,EAAW,CAAAiC,SACTlB,EAAOW,KAAIQ,IAAA,IAAC,GAAEN,EAAE,KAAEC,EAAI,MAAEE,GAAOG,EAAA,OAC9BC,EAAAA,EAAAA,MAAC9B,EAAW,CAAA4B,SAAA,EACVD,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,OAAKI,IAAG,GAAAC,OAAK1B,GAAU0B,OAAGN,GAASO,IAAKT,OAE1CG,EAAAA,EAAAA,KAACxB,EAAe,CAAAyB,SAAEJ,MAJFD,EAKJ,OAM1B,C","sources":["components/Cast/Cast.styled.tsx","components/Cast/Cast.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorListUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  margin-bottom: 80px;\n`;\n\nexport const ActorListLi = styled.li`\n  width: 270px;\n`;\n\nexport const ActorListTitleP = styled.p`\n  text-align: center;\n  margin-top: 5px;\n`;\n","import { fetchMoviesCast } from '../../api/fetchApi';\nimport { ActorListUl, ActorListLi, ActorListTitleP } from './Cast.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n\ninterface Actor {\n  id: number;\n  name: string;\n  photo: string;\n}\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState<Actor[] | null>(null);\n\n  useEffect(() => {\n    if (movieId) {\n      // Проверка на undefined\n      fetchMoviesCast(movieId).then(data => {\n        if (Array.isArray(data.cast)) {\n          const actorsArr: Actor[] = data.cast.map(\n            ({ id, name, profile_path }) => ({\n              id,\n              name,\n              photo: profile_path,\n            }),\n          );\n\n          setActors(actorsArr);\n        }\n      });\n    }\n  }, [movieId]);\n\n  return (\n    actors && (\n      <div>\n        <ActorListUl>\n          {actors.map(({ id, name, photo }) => (\n            <ActorListLi key={id}>\n              <div>\n                <img src={`${imgBaseUrl}${photo}`} alt={name} />\n              </div>\n              <ActorListTitleP>{name}</ActorListTitleP>\n            </ActorListLi>\n          ))}\n        </ActorListUl>\n      </div>\n    )\n  );\n}\n"],"names":["ActorListUl","styled","ul","_templateObject","_taggedTemplateLiteral","ActorListLi","li","_templateObject2","ActorListTitleP","p","_templateObject3","imgBaseUrl","Cast","movieId","useParams","actors","setActors","useState","useEffect","fetchMoviesCast","then","data","Array","isArray","cast","actorsArr","map","_ref","id","name","profile_path","photo","_jsx","children","_ref2","_jsxs","src","concat","alt"],"sourceRoot":""}