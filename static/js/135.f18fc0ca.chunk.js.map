{"version":3,"file":"static/js/135.f18fc0ca.chunk.js","mappings":"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","sources":["api/fetchApi.ts","components/MovieDetails/MovieDetails.styled.tsx","components/MovieDetails/MovieDetails.tsx","pages/PageDetails.tsx"],"sourcesContent":["import axios from 'axios';\n\ninterface ActorCast {\n  id: number;\n  name: string;\n  profile_path: string;\n}\n\ninterface FetchMoviesCast {\n  cast: ActorCast[];\n}\n\ninterface ActorReview {\n  id: string;\n  author: string;\n  content: string;\n}\n\ninterface FetchMoviesReviews {\n  results: ActorReview[];\n}\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3ed700b5d7b679b57b749969c057aea5';\n\nexport const fetchTrendMovies = async () => {\n  return await axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => response.data);\n};\n\nexport const fetchMoviesByName = async (name: string) => {\n  return await axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${name}`)\n    .then(response => response.data);\n};\n\nexport const fetchMoviesDetail = async (id: string) => {\n  return await axios\n    .get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`)\n    .then(response => response.data);\n};\n\nexport const fetchMoviesCast = async (id: string): Promise<FetchMoviesCast> => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`,\n    );\n    return response.data as FetchMoviesCast;\n  } catch (error) {\n    throw new Error('Failed to retrieve data');\n  }\n};\n\nexport const fetchMoviesReviews = async (\n  id: string,\n): Promise<FetchMoviesReviews> => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`,\n    );\n    return response.data as FetchMoviesReviews;\n  } catch (error) {\n    throw new Error('Failed to retrieve data');\n  }\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\nimport { Button } from 'antd';\n\nexport const ListButton = styled(Button)`\n  margin-bottom: 10px;\n`;\n\nexport const ListWrapDiv = styled.div`\n  display: flex;\n  gap: 30px;\n  margin-bottom: 80px;\n`;\n\nexport const ListH2 = styled.h2`\n  text-align: center;\n  margin-bottom: 5px;\n`;\n\nexport const ListLi = styled.li`\n  display: flex;\n  gap: 10px;\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;\n\nexport const ListTitleGenreH4 = styled.h4`\n  font-size: inherit;\n  font-weight: 600;\n  margin-right: 46px;\n`;\n\nexport const ListTitleGenreP = styled.p`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.5714285714285714;\n  color: rgba(0, 0, 0, 0.45);\n`;\n\nexport const ListDescriptionDiv = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-bottom: 5px;\n`;\n\nexport const ListTitleDescriptionH4 = styled.h4`\n  font-size: inherit;\n  font-weight: 600;\n`;\n\nexport const ListDescriptionTitleP = styled.p`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.5714285714285714;\n  color: rgba(0, 0, 0, 0.45);\n`;\n\nexport const ListRatingBoxUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\n\nexport const ListRatingBoxLi = styled.li`\n  display: flex;\n  gap: 5px;\n`;\n\nexport const ListRatingBoxSecondaryLi = styled.li`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const ListRatingTitleH4 = styled.h4`\n  font-size: inherit;\n  font-weight: 600;\n`;\n\nexport const ListRatingP = styled.p`\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1.5714285714285714;\n  color: rgba(0, 0, 0, 0.45);\n`;\n\nexport const AdditionalListH3 = styled.h3`\n  margin-bottom: 5px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 7px 15px;\n\n  width: fit-content;\n  border-radius: 2px;\n  color: #ffffff;\n  background-color: #2f364a;\n`;\n\nexport const AdditionalListLi = styled.li`\n  margin-bottom: 5px;\n`;\n\nexport const ListLink = styled(NavLink)`\n  font-weight: 600;\n  margin-bottom: 5px;\n  color: #000000;\n\n  :hover {\n    color: red;\n  }\n`;\n","import {\n  ListButton,\n  ListWrapDiv,\n  ListH2,\n  ListLi,\n  ListTitleGenreH4,\n  ListTitleGenreP,\n  ListDescriptionDiv,\n  ListTitleDescriptionH4,\n  ListDescriptionTitleP,\n  ListRatingBoxUl,\n  ListRatingBoxLi,\n  ListRatingBoxSecondaryLi,\n  ListRatingTitleH4,\n  ListRatingP,\n  AdditionalListH3,\n  AdditionalListLi,\n  ListLink,\n} from './MovieDetails.styled';\n\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Typography } from 'antd';\n\ninterface IMovieDetailsProps {\n  title: string;\n  genres: { name: string; id: number }[];\n  description: string;\n  poster: string;\n  releaseDate: string;\n  voteAverage: number;\n  voteCount: number;\n}\n\nconst { Text } = Typography;\n\nexport default function MovieDetails({\n  movieInfo\n}: {\n  movieInfo: IMovieDetailsProps;\n}) {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const subLocation = location.state?.from;\n  const imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n\n  const {\n    title,\n    genres,\n    description,\n    poster,\n    releaseDate,\n    voteAverage,\n    voteCount,\n  } = movieInfo;\n\n  const back = () => navigate(location?.state?.from ?? '/');\n\n  return (\n    <div>\n      <ListButton onClick={back}>Go back</ListButton>\n\n      <ListWrapDiv>\n        <img src={`${imgBaseUrl}${poster}`} alt={title} />\n        <div>\n          <div>\n            <ListH2>{title}</ListH2>\n            <Text keyboard>{releaseDate}</Text>\n          </div>\n          <ul>\n            <ListLi>\n              <ListTitleGenreH4>Genre:</ListTitleGenreH4>\n              {genres &&\n                genres.map(({ name, id }) => (\n                  <ListTitleGenreP key={id}>{name}</ListTitleGenreP>\n                ))}\n            </ListLi>\n          </ul>\n          <ListDescriptionDiv>\n            <ListTitleDescriptionH4>Descriptions:</ListTitleDescriptionH4>\n            <ListDescriptionTitleP> {description}</ListDescriptionTitleP>\n          </ListDescriptionDiv>\n          <ListRatingBoxUl>\n            <ListRatingBoxLi>\n              <ListRatingTitleH4>Vote average:</ListRatingTitleH4>\n              <ListRatingP>{voteAverage}</ListRatingP>\n            </ListRatingBoxLi>\n            <ListRatingBoxSecondaryLi>\n              <ListRatingTitleH4>Vote count:</ListRatingTitleH4>\n              <ListRatingP>{voteCount}</ListRatingP>\n            </ListRatingBoxSecondaryLi>\n          </ListRatingBoxUl>\n\n          <div>\n            <AdditionalListH3>Additional Information</AdditionalListH3>\n            <ul>\n              <AdditionalListLi>\n                <ListLink to=\"cast\" state={{ from: subLocation }}>\n                  Cast\n                </ListLink>\n              </AdditionalListLi>\n              <li>\n                <ListLink to=\"reviews\" state={{ from: subLocation }}>\n                  Reviews\n                </ListLink>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </ListWrapDiv>\n    </div>\n  );\n}\n","import MovieDetails from '../components/MovieDetails/MovieDetails';\nimport { fetchMoviesDetail } from '../api/fetchApi';\n\nimport { useState, useEffect, lazy, Suspense } from 'react';\nimport { useParams, Routes, Route } from 'react-router-dom';\n\nconst Cast = lazy(() => import('../components/Cast/Cast'));\nconst Reviews = lazy(() => import('../components/Reevaluation/Reevaluation'));\n\ninterface MovieDetailsPage {\n  title: string;\n  genres: { name: string; id: number }[];\n  description: string;\n  poster: string;\n  releaseDate: string;\n  voteAverage: number;\n  voteCount: number;\n}\n\nexport default function PageDetails() {\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState<MovieDetailsPage | null>(null);\n\n  useEffect(() => {\n    if (movieId) {\n      fetchMoviesDetail(movieId).then(\n        ({\n          original_title,\n          genres,\n          overview,\n          poster_path,\n          release_date,\n          vote_average,\n          vote_count,\n        }) => {\n          const movieInfo: MovieDetailsPage = {\n            title: original_title,\n            genres: genres,\n            description: overview,\n            poster: poster_path,\n            releaseDate: release_date,\n            voteAverage: vote_average,\n            voteCount: vote_count,\n          };\n\n          return setMovieInfo(movieInfo);\n        },\n      );\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {movieInfo && <MovieDetails movieInfo={movieInfo} />}\n\n      <Suspense fallback={<div>Loading...</div>}>\n        <Routes>\n          <Route path=\"cast\" element={<Cast />} />\n          <Route path=\"reviews\" element={<Reviews />} />\n        </Routes>\n      </Suspense>\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","fetchTrendMovies","async","axios","get","concat","then","response","data","fetchMoviesByName","name","fetchMoviesDetail","id","fetchMoviesCast","error","Error","fetchMoviesReviews","ListButton","styled","Button","_templateObject","_taggedTemplateLiteral","ListWrapDiv","div","_templateObject2","ListH2","h2","_templateObject3","ListLi","li","_templateObject4","ListTitleGenreH4","h4","_templateObject5","ListTitleGenreP","p","_templateObject6","ListDescriptionDiv","_templateObject7","ListTitleDescriptionH4","_templateObject8","ListDescriptionTitleP","_templateObject9","ListRatingBoxUl","ul","_templateObject10","ListRatingBoxLi","_templateObject11","ListRatingBoxSecondaryLi","_templateObject12","ListRatingTitleH4","_templateObject13","ListRatingP","_templateObject14","AdditionalListH3","h3","_templateObject15","AdditionalListLi","_templateObject16","ListLink","NavLink","_templateObject17","Text","Typography","MovieDetails","_ref","_location$state","movieInfo","location","useLocation","navigate","useNavigate","subLocation","state","from","title","genres","description","poster","releaseDate","voteAverage","voteCount","_jsxs","children","_jsx","onClick","back","_location$state$from","_location$state2","src","alt","keyboard","map","_ref2","to","Cast","lazy","Reviews","PageDetails","movieId","useParams","setMovieInfo","useState","useEffect","original_title","overview","poster_path","release_date","vote_average","vote_count","_Fragment","Suspense","fallback","Routes","Route","path","element"],"sourceRoot":""}